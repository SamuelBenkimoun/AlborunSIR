/*
 * Définition des paramètres à fournir au modèle
 * Chaque paramètre défini ici est vu comme une variable
 * pré-initialisée dans le scénario principal.
 * 
 * Si le programme qui pilote notre modèle a fournit des valeurs
 * elle ont été placées dans ces variables. Sinon ce sont les valeurs
 * par défaut qui sont présentes.
 */
metadata {
  // Etape 2
  parameter String region {default "REUNION"}			// sous forme de liste deroulante "NORD" "SUD" "EST" OUEST" "REUNION"
  parameter Boolean replaceMeteoFiles {default false}	// nouvelles donnees meteo : OUI ou NON
  //parameter String inputDirNew {default "data/ENTREES"}	// repertoire avec les nouvelles donnees meteo
  parameter String inputDirNew {default "data/ENTREES"}	// repertoire avec les nouvelles donnees meteo
  // Etape 3
  parameter String inputDirWork {default "data/TRAVAIL"}
  // Etape 4
  parameter String date_debut {default "01/01/2011"}
  parameter String date_fin {default "31/12/2014"}
  parameter Boolean outputAllDates {default true}		// sous forme de case a cocher
  parameter Boolean outputLastDate {default true}		// sous forme de case a cocher
  parameter Boolean exportSHP {default false}
  parameter String outputDir {default "output"}
  
  parameter Boolean exportKML {default false}
  
}

scenario ALBORUN {  

  println("Model ALBORUN ready to run")
  let debutCalcul = new Date
  
//////////// Parametres
  
  fix frequencedisplay = 1 //frequence d'affichage - ici tous les 7 jours
  fix dt = 0.1
  
  let bdateuser = Date|fromString("dd/MM/yyyy",date_debut) // dates souhaitees par l'utilisateur pour les sorties
  let edateuser = Date|fromString("dd/MM/yyyy",date_fin)
  
//////////// 1) Instanciation des datafacers 
  println("Lecture datafacers...")
  let shp = new Shp	// le shapefile avec les zones alizes
  let nomDeFichier = inputDirWork + "/SHAPEFILE/ALIZES/Export_Output_Test.shp"
  shp.setFileName(nomDeFichier)

  let shpStation = new ShpStation // le shapefile avec la localisation des stations
  nomDeFichier = inputDirWork + "/SHAPEFILE/STATIONS/Stations_meteo.shp"
  shpStation.setFileName(nomDeFichier)
  
  let csvData = new CsvData // le fichier texte (csv) avec les donnees Meteo
  nomDeFichier = inputDirWork + "/CSVDATA/METEO/97401540.csv"
  csvData.setFileName(nomDeFichier)
  
  let csvModel = new CsvModel // le fichier texte (csv) avec la table des valeurs du modele stat
  nomDeFichier = inputDirWork + "/CSVDATA/MODELE/Reunion_modele_complet_res.csv"
  csvModel.setFileName(nomDeFichier)
  
  let csvDataNew = new CsvData // le fichier texte (csv) avec les nouvelles donnees Meteo
  nomDeFichier = inputDirNew + "/97401540.csv"
  csvDataNew.setFileName(nomDeFichier)
  
  let csvDataOut = new CsvData // le fichier texte (csv) avec l'ecriture des parametres de la simulation
  nomDeFichier = outputDir + "/historique_simulations.csv"
  csvDataOut.setFileName(nomDeFichier)
  
  let kmlout = new KmlOut	// le fichier KML en sortie
  nomDeFichier = outputDir + "/"+region + "_serietemporelle.kml"
  kmlout.setFileName(nomDeFichier)
  
  let shpout = new ShpOutAllDates	// le fichier ShapeFile en sortie : toutes les dates
  
  let shpout2 = new ShpOut1Date // le fichier ShapeFile en sortie : 1 shapefile / date
  println("Datafacers lus...") 
//////////// 2) Lecture des donnees
 //println("Reading data ... ")
 
 // List of Parcels obtained from the Shapefile datafacer
  let lparceltot = shp.readAllParcelle // La liste des polygones 
  println(lparceltot) 
  println("lparceltot instanciée...")
 // Select parcel in region
 
  let lparcel = new List<Parcelle>
  if (region!="REUNION") {
	for(parc:lparceltot) {
		if (parc.arrond==region) {
		lparcel.add(parc)
		}
	} 
}
  else lparcel = lparceltot
 println("lparcel instanciée...")	
 //println("found "+lparcel.size()+" parcels")
 
// List of meteorological station obtained from the Shapefile datafacer
  let lstation = shpStation.readAllLocStation()
  //println("found "+lstation.size()+" meteorological stations")
  
// Read temperature and rainfall data
  fix allMeteoData = new KeyMap<Integer,List<DataStation>>
  
  let i = 0
  for (s:lstation) {
  	// Anciennes donnees meteo
  	let nomDeFichierCsv = inputDirWork + "/CSVDATA/METEO/"+s.numero+".csv"
  	csvData.fileName = nomDeFichierCsv
  	
  	// Nouvelles donnees meteo
  	if (replaceMeteoFiles==true) {
  		let nomDeFichierCsvNew = inputDirNew + "/" + s.numero+".csv"
  		//println(nomDeFichierCsv)
  		csvDataNew.fileName = nomDeFichierCsvNew
  		let DataMeteoNew = csvDataNew.readAll()
  		// Ecriture dans le fichier TRAVAIL/csv des nouvelles donnees meteo
  	
  		for (j:DataMeteoNew) {
  			let ligneDeTexte = j.numero.toString
  			ligneDeTexte = ligneDeTexte.concat(";"+j.dateTXT+";"+j.rainMM.toString+";"+j.tempMin.toString+";"+j.tempMax.toString)
  			printToFile(nomDeFichierCsv, ligneDeTexte)
     	}
     }	// fin if
  	
  	let DataMeteo = csvData.readAll()
  	
  	allMeteoData.put(i,DataMeteo)
  	i = i+1
  }
  
  
  //println("Size meteo data " + allMeteoData.get(0).size())
  
  // Read model data (table du modele statistique)
  let tableModel = csvModel.readAll()
   //println("Size table model " + tableModel.size())

///////// 2.5) Styles de sortie   
let plt = colorRange(6,"gyr")        // get list of colors from predefined palette "gyr" 
kmlout.defStyleRange("R0_",1.0,plt,-0.2) // prefix, line thickness, list of colors , darken line color a little
 
   
    
//////////// 3) Initialisation
 //print("Initialization ... ")
 
 // Definition des parametres : date de debut et duree de la simulation
  fix bdate = Date|fromString("yyyy-MM-dd",allMeteoData.get(0).get(0).dateTXT)
  //println("bdate = " + bdate)
  let bdate1 = Date|fromString("yyyy-MM-dd",allMeteoData.get(0).get(0).dateTXT)
  bdate1.addYears(1)
  if (bdateuser.isBefore(bdate1)==true) {bdateuser = bdate1}	// pour garder une annee d'initialisation
  let edate = Date|fromString("yyyy-MM-dd",allMeteoData.get(0).get(0).dateTXT)
  edate.addDays(allMeteoData.get(0).size()-1)
  if(edateuser.isAfter(edate)==true) edateuser = edate
  //println("bdate = " + bdate + " ; bdateuser = " + bdateuser +" ; edateuser = " + edateuser + " ; edate = " + edate )
  
  // Modification des noms de fichiers de sorties
  //nomDeFichier = outputDir + "/"+region + "_serietemporelle.shp"
  let nomDeFichierShpAll = outputDir + "/"+region + "_" + bdateuser.getYear() + format(bdateuser.getMonth(),"00") + format(bdateuser.getDayOfMonth(),"00") + "_" + edateuser.getYear() + format(edateuser.getMonth(),"00") + format(edateuser.getDayOfMonth(),"00") +".shp"
  shpout.setFileName(nomDeFichierShpAll)
  
  if (outputAllDates==true) {
  	shpout.remove() // si le fichier Shape en sortie existe deja, il est supprime
  }
  
  let nomDeFichierShp1Date = outputDir + "/"+region + "_" + edateuser.getYear() + format(edateuser.getMonth(),"00") + format(edateuser.getDayOfMonth(),"00") +".shp"
  shpout2.setFileName(nomDeFichierShp1Date)
  if (outputLastDate==true) {
  	shpout2.remove() // si le fichier Shape en sortie existe deja, il est supprime
  }
  
 let now = bdate.clone() 
 let test_display =0.0
 let fin = now.clone
 
 for(parc:lparcel) {
    parc.egg = 1000.0
  	parc.larvae = 0.0
  	parc.pupae = 0.0
  	parc.aem = 0.0
  	parc.a1h = 0.0
  	parc.a1g = 0.0
  	parc.a1gS = 0.0
  	parc.a1gE = 0.0
  	parc.a1gI = 0.0
  	parc.a1o = 0.0
  	parc.a1oS = 0.0
  	parc.a1oE = 0.0
  	parc.a1oI = 0.0
  	parc.a2h = 0.0
  	parc.a2hS = 0.0
  	parc.a2hE = 0.0
  	parc.a2hI = 0.0
  	println("a2hI init " + parc.a2hI)
  	parc.a2g = 0.0
  	parc.a2gS = 0.0
  	parc.a2gE = 0.0
  	parc.a2gI = 0.0
  	parc.a2o = 0.0
  	parc.a2oS = 0.0
  	parc.a2oE = 0.0
  	parc.a2oI = 0.0
  	parc.popS = parc.pop
  	parc.popE = 0.0
  	parc.popI = 0.0
  	parc.popR = 0.0
  	parc.rain7 = 0.0
  	parc.raincumul7 = 0.0
  	parc.rainday7 = 0
  	parc.raincumul35 = 0.0	
  	
  	// Connect parcels to the closest meteo station
    parc.dist_station = 1000000.0
    i = 0
    for (s:lstation) {
		let dist = parc.geom.distance(s.geom)
		if (dist<parc.dist_station){
			parc.dist_station=dist
			parc.num_station=s.numero
			parc.id_station=i
			//parc.nom_station=s.name
		} // fin if
		i=i+1
	} // fin boucle for : station
} // fin boucle for : parcels

/// Messages pour la console
// La commande printOut est en fait un autre scenario défini plus bas
 // à la suite de celui-ci. C'est juste pour simplifier l'écriture.
  
  printOut("Région : "+region)
  printOut("Début de simulation : "+date_debut) 
  printOut("Fin de simulation : "+date_fin) 
  printOut("Dossier de données : "+inputDirWork) 
  if (replaceMeteoFiles == true) printOut("Dossier de mise à jour : "+inputDirNew) 
  printOut("Dossier de résultats : "+outputDir)
  printOut("Simulation ... ")
  
//////////// 4) Simulation
//println("Simulation start: "+bdate)
  
let day = 0

//for (day : 0..dureesimul-1) {
while (now.isBefore(edateuser.addDays(1))==true) {
	//println(now)
	printOut("date en cours : "+now.toString("dd/MM/yyyy"))
	
	edateuser.addDays(-1)
	
		
	//if (day>=365) {
	if (now.isAfter(bdateuser)==true) {		
		test_display = IEEEremainder(day,frequencedisplay)	// pour l'export des donnees apres la premiere annee
		fin = now.clone
        fin.addDays(frequencedisplay)
	}
	
	let j=0
	
	for (p:lparcel) {
	
		
		i = p.id_station
		if (day==1173) { //808
			p.popS = p.popS-1.0
			p.popI = p.popI+1.0
		}
      	
      	// Read temperature of the day
	  	p.tmin = allMeteoData.get(i).get(day).tempMin
	  	p.tmax = allMeteoData.get(i).get(day).tempMax
	  	if (day>=42) {p.tn42 = allMeteoData.get(i).get(day-42).tempMin}
	  	  	  	
  	  	// Read rainfall of the day
	  	p.rain = allMeteoData.get(i).get(day).rainMM
      	if (day>=7) {p.rain7 =  allMeteoData.get(i).get(day-7).rainMM}
      	if (day>=35) {p.rain35 =  allMeteoData.get(i).get(day-35).rainMM}
      	
      	p.updateVariablesRain() // Mise a jour des variables pluie : cumul sur 7 jours, nombre de jours de pluie, log du cumul 35 jours
      	p.updateVariablesTemp()	// Mise a jour des variables temperature : temperature moyenne, cumul des temperatures min sur 42 jours
      	p.calculAh()
      	p.updateFunctions(p.temperature, p.rain)	//Mise a jour des fonctions du modele de dynamique de population    	     	
      	p.dynpop(dt)								// Resolution des equations
     	
      	println("fao : " + p.fao)
     
      	if (p.a2oI<0) {p.a2oI=0.0}
      	//p.calculAtot()
      	//p.r0=p.calculR0()
      	if ((outputAllDates == true) || (now.isAfter(edateuser)==false && now.isBefore(edateuser)==false)) {
      		p.calculModel2(tableModel)
      		} // on calcule le modèle stat seulement pour les dates demandees
      	      	
      	if (exportKML==true) {p.classify()	}							// Classification pour affichage KML
      	
      	// Write A2h values in KML or shapefile - a partir de l'annee 2
      	//if (day>=365) {									
      	if (now.isAfter(bdateuser)==true) {
       		if (test_display ==0) { 
       			if (exportKML==true) { p.outputKml(day, now, frequencedisplay, kmlout)} // export Kml
      			p.date_begin = now.toString("yyyy-MM-dd")	//for Shp export and use with time manager plugin	%Y-%m-%d
      			p.date_end = fin.toString("yyyy-MM-dd")  // in QGIS
     		} 
      	} // fin du if
      	
      	j = j+1
      	
     
     } // fin de la boucle sur les parcelles
    println(lparcel.get(0).popI)
     // Write A2h values in shapefile - a partir de l'annee 2
     if (now.isAfter(bdateuser)==true) {									
       		if (test_display ==0) {
       			// Creation d'un Shp par date
       			if (outputAllDates==true) shpout.append(lparcel)
       		}
     }
     
     day = day +1
     now.addDays(1)
} // fin de la boucle sur les jours

//////////// 5) Export

// Saving kml file 
println(".")
println("Saving kml file...")
kmlout.saveAsKml()
//print("Ok.")

//println("Saving Shp file...")
if (outputLastDate==true) shpout2.append(lparcel)
//println(shpout.about())
//print("Ok.")
//println("Saving simulation parameters file...")
writeOutputTXT(bdate, csvDataOut, nomDeFichierShpAll, nomDeFichierShp1Date)
//print("Ok.")
  
//print("Done ... ")

printOut("Durée totale de simulation : "+day+" jours")

if (outputLastDate==true) printOut("Fichier de sortie (une date) : " + nomDeFichierShp1Date)
if (outputAllDates==true) printOut("Fichier de sortie (multidate) : " + nomDeFichierShpAll)
printOut("Simulation terminée :-) \n")
let finCalcul = new Date
let duree_ms = finCalcul.timeAsMilliseconds - debutCalcul.timeAsMilliseconds
//println("Duree du calcul : "+duree_ms+ " ms")


}

scenario writeOutputTXT(Date bdate, CsvData csvDataOut, String nomDeFichierShpAll, String nomDeFichierShp1Date)
	{
		let now = new Date
		let nomDeFichierCsvOut = outputDir + "/" + now.toString("YYYYMMddHHmmss") +".txt"
		//println (nomDeFichierCsvOut)
		printOut("Fichier paramètres de la simulation : " + nomDeFichierCsvOut)
		csvDataOut.setFileName(nomDeFichierCsvOut)
		let texte = "Date/heure de la simulation : " + now.toString
		printToFile(nomDeFichierCsvOut, texte)
		texte = " "
		printToFile(nomDeFichierCsvOut, texte)
		texte = "Parametres"
		printToFile(nomDeFichierCsvOut, texte)
		texte = "Date debut : " + date_debut.toString
		printToFile(nomDeFichierCsvOut, texte)
		texte = "Date fin : " +date_fin.toString
		printToFile(nomDeFichierCsvOut, texte)
		
		let f  = new java.io.File(inputDirNew)
  		//println(f.absolutePath)
		//texte = ("Dossier Entrees : ") +inputDirNew
		texte = ("Dossier Entrees : ") +f.absolutePath
		printToFile(nomDeFichierCsvOut, texte)
		
		f  = new java.io.File(inputDirWork)
		texte = "Dossier Travail : " +f.absolutePath
		printToFile(nomDeFichierCsvOut, texte)
		
		f  = new java.io.File(outputDir)
		texte = "Dossier Sorties : " +f.absolutePath
		printToFile(nomDeFichierCsvOut, texte)
		
		texte = "Sortie toutes les dates : " + outputAllDates.toString
		printToFile(nomDeFichierCsvOut, texte)
		texte = "Sortie derniere date : "  + outputLastDate.toString
		printToFile(nomDeFichierCsvOut, texte)
		texte = "Remplacement des fichiers avec les donnees Meteo : "  + replaceMeteoFiles.toString
		
		printToFile(nomDeFichierCsvOut, texte)
		
		texte = "Region : " + region
		printToFile(nomDeFichierCsvOut, texte)
		texte = " "
		printToFile(nomDeFichierCsvOut, texte)
		
		if ((outputAllDates==true) || (outputLastDate==true) || (exportKML==true)) {
			texte = "Fichiers en sortie"
			printToFile(nomDeFichierCsvOut, texte)
		}
		
		if (outputAllDates==true) {
			texte = nomDeFichierShpAll
			printToFile(nomDeFichierCsvOut, texte)
		}
		if (outputLastDate==true) {
			texte = nomDeFichierShp1Date
			printToFile(nomDeFichierCsvOut, texte)
		}
		
	}

// Envoi de messages à imprimer vers le programme pilotant ce modèle
scenario printOut(String msg) {
  println("-->  "+msg) // affiche le message localement pour vérifier ce qui se passe
  for (sl:simlisteners) sl.consoleEvent(msg+"\n") // Envoie le message (avec ajout d'un passage à la ligne suivante)
}